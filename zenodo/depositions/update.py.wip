import json
import os
from typing import Optional, Union

import click
import requests
from dotenv import load_dotenv

from zenodo.depositions.deposition import Deposition

load_dotenv()


@click.command()
@click.option("--metadata", help="Optional json of metadata for the deposition.")
@click.option("--metadata_file", type=click.Path(exists=True, file_okay=True, dir_okay=False), help="Optional json file of metadata for the deposition.")
@click.option("--prereserve-doi", help="Prereserve a DOI (not pushed to Datacite until deposition is published).")
@click.option("--silent", default=False, help="Don't print any output")
@click.option(
    "--token",
    prompt=True,
    prompt_required=False,
    hide_input=True,
    show_default="ENVVAR: 'ZENODO_TOKEN'",
    help="Required when the envvar is not set.",
)
def update(
        metadata: Union[str, dict] = '{}',
        metadata_file: str = None,
        prereserve_doi: Optional[bool] = None,
        silent: bool = True,
        token: Optional[str] = None,
) -> Deposition:
    if token is None:
        token = os.getenv("ZENODO_TOKEN")

    if metadata_file is not None:
        with open(metadata_file) as f:
            metadata = json.load(f)

    if isinstance(metadata, str):
        metadata = json.loads(metadata)

    if prereserve_doi is True:
        metadata['metadata']['prereserve_doi'] = True

    base_url = os.getenv("ZENODO_URL")
    header = {"Authorization": f"Bearer {token}"}
    response = requests.put(f"{base_url}/api/deposit/depositions", json=metadata, headers=header)
    if not silent:
        json_response = json.dumps(response.json(), indent=4)
        click.echo(json_response)

    response.raise_for_status()
    return response.


if __name__ == "__main__":
    update()
